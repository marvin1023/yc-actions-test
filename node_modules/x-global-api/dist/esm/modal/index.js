class Modal {
  parent = document.body;
  wrap = null;
  footer = null;
  overlay = null;
  isHiding = false;
  options;
  constructor() {
    this.initOptions();
  }
  initOptions() {
    this.options = {
      width: "300px",
      footerTexts: [{ text: "\u53D6\u6D88" }, { text: "\u786E\u8BA4", color: "#00cafc" }],
      footerLayout: "inline",
      maskCanClose: true,
      animation: "fade"
    };
  }
  show(options) {
    if (this.wrap) {
      this.hide(() => {
        this.show(options);
      });
      return;
    }
    Object.assign(this.options, options);
    const { title, content, parent } = options;
    if (!content && !title) {
      console.error("content or title is required!");
      return;
    }
    if (parent) {
      this.parent = parent;
    }
    this.generateHTML();
    this.onEventListener();
  }
  generateHTML() {
    const { wrapClass, footerTexts, footerLayout, width, title, content, animation } = this.options;
    this.wrap = document.createElement("div");
    this.wrap.classList.add("global-api-modal");
    if (wrapClass) {
      this.wrap.classList.add(wrapClass);
    }
    const mainClass = `global-api-modal-main global-api-${animation}-in`;
    const footerClass = `global-api-modal-footer global-api-modal-footer--${footerLayout}`;
    const btnHTML = footerTexts.reduce((prev, next, index) => {
      const style = next.color ? `color: ${next.color};` : "";
      return prev + `<div class="global-api-modal-footer-btn" data-key="${next.key || index}" style="${style}">${next.text}</div>`;
    }, "");
    const maskHTML = '<div class="global-api-modal-overlay global-api-fade-in"></div>';
    const mainHTMlBegin = `<div class="${mainClass}" style="width: ${width};">`;
    const titleHTML = title ? `<div class="global-api-modal-title">${title}</div>` : "";
    const contentHTML = content ? `<div class="global-api-modal-content">${content}</div>` : "";
    const footerHtml = `<div class="${footerClass}">${btnHTML}</div>`;
    const mainHTMlEnd = "</div>";
    const innerHTML = maskHTML + mainHTMlBegin + titleHTML + contentHTML + footerHtml + mainHTMlEnd;
    this.wrap.innerHTML = innerHTML;
    this.parent.appendChild(this.wrap);
  }
  onEventListener() {
    this.footer = this.wrap.querySelector(".global-api-modal-footer");
    this.overlay = this.wrap.querySelector(".global-api-overlay");
    this.footer?.addEventListener("click", this.footerHandler.bind(this));
    if (this.options.maskCanClose) {
      this.overlay?.addEventListener("click", this.maskHandler.bind(this));
    }
  }
  offEventListener() {
    this.footer?.removeEventListener("click", this.footerHandler.bind(this));
    this.overlay?.removeEventListener("click", this.maskHandler.bind(this));
  }
  footerHandler(e) {
    const { className, dataset } = e.target;
    const { callback } = this.options;
    if (className.includes("global-api-modal-footer-btn")) {
      if (callback?.(dataset.key) !== true) {
        this.hide();
      }
    }
  }
  maskHandler() {
    this.hide();
  }
  hide(callback) {
    if (!this.wrap || this.isHiding) {
      return;
    }
    this.isHiding = true;
    const { animation } = this.options;
    const mainNode = this.wrap.querySelector(".global-api-modal-main");
    const overlayNode = this.wrap.querySelector(".global-api-modal-overlay");
    const animationendHandler = () => {
      mainNode?.removeEventListener("animationend", animationendHandler);
      this.offEventListener();
      this.parent.removeChild(this.wrap);
      this.wrap = null;
      this.isHiding = false;
      this.initOptions();
      callback?.();
    };
    mainNode?.addEventListener("animationend", animationendHandler);
    mainNode?.classList.add(`global-api-${animation}-out`);
    overlayNode?.classList.add("global-api-fade-out");
  }
}

export { Modal };
